{"title":"Papers","markdown":{"yaml":{"title":"Papers","comments":false,"section-divs":false,"echo":false,"editor_options":{"chunk_output_type":"console"}},"headingText":"| label: \"papers\"","containsRefs":false,"markdown":"\n\nThe following is a list of my selected peer-reviewed publications. All articles, abstracts, book chapters can be found at [Google Scholar {{< ai google-scholar size=lg >}}](https://scholar.google.com/citations?user=IcwW-WAAAAAJ&hl=en).\n\nA `.pdf` version can be downloaded [here {{< fa solid file-pdf size=lg >}}](data/Tsyplenkov-Anatoly_publications.pdf).\n\n```{r setup, include=FALSE}\n\nlibrary(tidyverse)\nlibrary(bib2df) # dev version devtools::install_github(\"ropensci/bib2df\")\n\n```\n\n\n```{r}\n#| id: \"papers\"\n#| output: asis\n\n# Modified from Drew Dimmery's website\n# Dear Drew, if you reading this, thanky you very much\n# https://github.com/ddimmery/quarto-website/blob/main/research.qmd\n\n# read bibtex files ----\ndf <- bib2df(\"!My publications.bib\") \n\n# custom buttons ----\n# Buttons. See \n# https://github.com/quarto-ext/fontawesome/issues/6\n# https://jpswalsh.github.io/academicons/\ngithub_button <- \"fa brands github\"\npdf_button <- \"fa solid file-pdf\"\ndoi_button <- \"ai doi\"\npreprint_button <- \"ai arxiv\"\n\n# supporting functions ----\n# highlight your name\nmake_bold <- \n  function(x, format = \"html\"){\n    \n    if (format == \"html\") {\n      bold <- c(\"<b>\", \"</b>\")\n    } else if (format == \"tex\"){\n      bold <- c(\"**\", \"**\")\n    }\n    \n    if (is.na(x)) {\n      y <- x\n    } else if (str_detect(tolower(x), \"tsyplenkov|цыпленков\")) {\n      y <- paste0(bold[1], x, bold[2])\n    }\n    else {\n      y <- x\n    }\n    return(y)\n  }\n\n# create button\nmake_button <- \n  function(url, icon){\n    \n    icon_base <- \n      paste0(\"[{{< \", icon,\" size=xl >}}]\")\n      \n    paste0(\"\\n \", icon_base, \"(\", url, \") \")  \n    \n  }\n\n# func to create an bibliographic entry\n# I tried to replicate Nature Citation Style\nmake_entry <- \n  function(.data){\n    \n    # Authors\n    authors <-\n      .data$AUTHOR %>%\n      unlist() %>%\n      as.list() %>%\n      map(~make_bold(.x)) %>%\n      unlist() %>%\n      paste(., collapse = \", \")\n    \n    # Title\n    title <- paste0(\"<i>\", .data$TITLE, \"</i>\") %>% \n      str_remove_all(\"(\\\\})\") %>% \n      str_remove_all(\"(\\\\{)\") \n      \n    # Journal\n    journal <- .data$JOURNAL\n    \n    # Year\n    year <- .data$year\n    \n    # Link\n    url <- case_when(\n      !is.na(.data$DOI) ~ paste0(\"https://doi.org/\", .data$DOI),\n      is.na(.data$DOI) ~ .data$URL\n    )\n    \n    # Github button\n    github <- \n      case_when(\n        str_detect(.data$URL, \"github\") ~ make_button(.data$URL, github_button),\n        TRUE ~ \"\"\n      )\n    \n    # Preprint \n    preprint <- \n      case_when(\n        !is.na(.data$ANNOTATION) ~ make_button(.data$ANNOTATION, preprint_button),\n        TRUE ~ \"\"\n      )\n    \n    # return collected bibliographic entry\n    paste0(\"<li class='list-group-item'>\",\n           authors, \" \",\n           title, \". \", \n           journal,\n           \" (\", year, \")\",\n           \"<br>\",\n           make_button(url, doi_button),\n           preprint,\n           github,\n           \"</li>\")\n  }\n\n# Format every article \nentries <-\n  df %>% \n  mutate(year = YEAR) %>% \n  filter(CATEGORY == \"ARTICLE\") %>% \n  rowid_to_column() %>% \n  group_by(YEAR, rowid) %>% \n  nest() %>% \n  mutate(paper = map_chr(data, ~make_entry(.x))) \n\n# Create list group item\nentries_year <- \n  entries %>% \n  ungroup() %>% \n  select(-rowid) %>%\n  arrange(-YEAR) %>% \n  group_by(YEAR) %>% \n  mutate(id = row_number()) %>% \n  mutate(paper = case_when(\n    id == first(id) ~ paste0(\"<ul class='list-group list-group-flush'>\",\n                             paper),\n    id == last(id) ~ paste0(paper, \"</ul>\"),\n    TRUE ~ paper\n  ))  \n\n# Create an year-header\nentries_year_row <- \n  entries_year[,-2] %>%\n  nest() %>% \n  mutate(data = map(data, ~add_row(.x,\n                                   paper = NA_character_,\n                                   id = 0,\n                                   .before = 1))) %>% \n  unnest(c(data)) %>% \n  ungroup() %>% \n  mutate(paper = case_when(\n    is.na(paper) ~ paste0(\"## \", YEAR, \"\\n\"),\n    TRUE ~ paper\n  ))\n\n# Print it\nentries_year_row$paper %>% \n  as.list() %>% \n  walk(~cat(.x))\n\n```\n\n```{r, include=FALSE}\nlibrary(lubridate)\nlibrary(fs)\nlibrary(rmarkdown)\nlibrary(textcat)\n\ndf_en <- \n  df %>% \n  arrange(-YEAR) %>% \n  filter(CATEGORY == \"ARTICLE\") %>% \n  filter(textcat(TITLE) == \"english\")\n\ndf_to_tex <- \n  function(.data){\n    \n    # Authors\n    authors <-\n      .data$AUTHOR %>%\n      unlist() %>%\n      as.list() %>%\n      map(~make_bold(.x, format = \"tex\")) %>%\n      unlist() %>%\n      paste(., collapse = \", \") \n    \n    # Title\n    title <- paste0(\"_\", .data$TITLE, \"_\") %>% \n      str_remove_all(\"(\\\\})\") %>% \n      str_remove_all(\"(\\\\{)\") \n    \n    # Journal\n    journal <- .data$JOURNAL\n    year <- .data$year\n    # DOI\n    doi <- case_when(\n      !is.na(.data$DOI) ~ paste0(\"DOI: \", .data$DOI),\n      is.na(.data$DOI) ~ \"\"\n    )\n      \n    paste0(\"<li class='list-group-item'>\",\n           authors, \". \",\n           year, \". \",\n           title, \". \", \n           journal, \" \",\n           .data$VOLUME, \": \",\n           .data$PAGES, \". \",\n           doi,\"</li>\")\n    \n  }\n\nheader <- c(\n  paste0(\"# Publication list \\n\",\n         \"Author: Anatoly Tsyplenkov, Created: \",\n         month(Sys.Date(), label = T, locale = \"English-US\"),\n         \" \",\n         format(Sys.Date(), \"%Y\"), \"\\n\")\n)\n\nentries <-\n  df_en %>% \n  mutate(year = YEAR) %>% \n  rowid_to_column() %>% \n  group_by(YEAR, rowid) %>% \n  nest() %>% \n  mutate(paper = map_chr(data, ~df_to_tex(.x))) %>% \n  mutate(paper = paste0(\"\\n\", rowid, \". \", paper))\n\nif (file.exists(\"data/!publ_list.md\")) {\n  fs::file_delete(\"data/!publ_list.md\")\n}\n\nc(header, entries$paper) %>% \n  as.list() %>% \n  walk(~cat(.x,\n            file = \"data/!publ_list.md\",\n            append = TRUE))\n\nrmarkdown::render(\"data/!publ_list.md\",\n                  output_format = \"pdf_document\",\n                  output_file = \"Tsyplenkov-Anatoly_publications.pdf\",\n                  output_dir = \"data/\",\n                  clean = T,\n                  quiet = T)\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":4,"html-math-method":"katex","include-in-header":["includes.html"],"highlight-style":"github","section-divs":false,"output-file":"papers.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","comments":false,"theme":{"light":["cosmo","theme.scss"]},"toc-title":"Contents","title":"Papers","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}}}